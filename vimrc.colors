" ===============================================================
" Based on OceanicNext by Mike Hartington
" ===============================================================

if (has("termguicolors"))
    set termguicolors
endif

" {{{ Setup
  set background=dark
  hi clear
  if exists("syntax_on")
    syntax reset
  endif
  let g:colors_name="OceanicNext"
" }}}
" {{{ Italics
  let g:oceanic_next_terminal_italic = get(g:, 'oceanic_next_terminal_italic', 0)
  let s:italic = ""
  if g:oceanic_next_terminal_italic == 1
    let s:italic = "italic"
  endif
"}}}
" {{{ Bold
  let g:oceanic_next_terminal_bold = get(g:, 'oceanic_next_terminal_bold', 0)
  let s:bold = ""
  if g:oceanic_next_terminal_bold == 1
   let s:bold = "bold"
  endif
"}}}
" {{{ Colors
  " Type :source ~/.vimrc to display color values
let s:black=[$BLACK, '16']
let s:bblack=[$BBLACK, '59']
let s:white=[$WHITE, '231']
let s:bwhite=[$BWHITE, '231']
let s:yellow=[$YELLOW, '214']
let s:byellow=[$BYELLOW, '220']
let s:red=[$RED, '167']
let s:bred=[$BRED, '208']
let s:magenta=[$MAGENTA, '170']
let s:bmagenta=[$BMAGENTA, '176']
let s:blue=[$BLUE, '39']
let s:bblue=[$BBLUE, '188']
let s:cyan=[$CYAN, '37']
let s:bcyan=[$BCYAN, '32']
let s:green=[$GREEN, '42']
let s:bgreen=[$BGREEN, '49']
let s:base00=[$BASE0, '234']
let s:base01=[$BASE1, '235']
let s:base02=[$BASE2, '236']
let s:base03=[$BASE3, '59']
let s:base04=[$BASE4, '102']
let s:base05=[$BASE5, '152']
let s:base06=[$BASE6, '188']
let s:base07=[$BASE7, '188']

let s:base08=s:red
let s:base09=s:bred
let s:base0A=s:green
let s:base0B=s:bgreen
let s:base0C=s:yellow
let s:base0D=s:byellow
let s:base0E=s:blue
let s:base0F=s:bblue
let s:base10=s:magenta
let s:base11=s:bmagenta
let s:base12=s:cyan
let s:base13=s:bcyan
let s:base14=s:white
let s:none=['NONE', 'NONE']

" }}}
" {{{ Highlight function
function! <sid>hi(group, fg, bg, attr, attrsp)
  " fg, bg, attr, attrsp
  if !empty(a:fg)
    exec "hi " . a:group . " guifg=" .  a:fg[0]
    exec "hi " . a:group . " ctermfg=" . a:fg[1]
  endif
  if !empty(a:bg)
    exec "hi " . a:group . " guibg=" .  a:bg[0]
    exec "hi " . a:group . " ctermbg=" . a:bg[1]
  endif
  if a:attr != ""
    exec "hi " . a:group . " gui=" .   a:attr
    exec "hi " . a:group . " cterm=" . a:attr
  endif
  if !empty(a:attrsp)
    exec "hi " . a:group . " guisp=" . a:attrsp[0]
  endif
endfunction
" }}}
" {{{ call <sid>:hi(group, fg, bg, gui, guisp)
call <sid>hi('Bold',                       '',       '',       'bold',      '')
call <sid>hi('Debug',                      s:base08, '',       '',          '')
call <sid>hi('Directory',                  s:base0E, '',       '',          '')
call <sid>hi('ErrorMsg',                   s:base08, s:base00, '',          '')
call <sid>hi('Exception',                  s:base08, '',       '',          '')
call <sid>hi('FoldColumn',                 s:base0E, s:base00, '',          '')
call <sid>hi('Folded',                     s:base03, s:base01, s:italic,    '')
call <sid>hi('IncSearch',                  s:base01, s:base0C, '',          '')
call <sid>hi('Italic',                     '',       '',       s:italic,    '')

call <sid>hi('Macro',                      s:base08, '',       '',          '')
call <sid>hi('MatchParen',                 s:base05, s:base03, '',          '')
call <sid>hi('ModeMsg',                    s:base0A, '',       '',          '')
call <sid>hi('MoreMsg',                    s:base0A, '',       '',          '')
call <sid>hi('Question',                   s:base0E, '',       '',          '')
call <sid>hi('Search',                     s:base03, s:base0C, '',          '')
call <sid>hi('SpecialKey',                 s:base03, '',       '',          '')
call <sid>hi('TooLong',                    s:base08, '',       '',          '')
call <sid>hi('Underlined',                 s:base08, '',       '',          '')
call <sid>hi('Visual',                     '',       s:base02, '',          '')
call <sid>hi('VisualNOS',                  s:base08, '',       '',          '')
call <sid>hi('WarningMsg',                 s:base08, '',       '',          '')
call <sid>hi('WildMenu',                   s:base14, s:base0E, '',          '')
call <sid>hi('Title',                      s:base0E, '',       '',          '')
call <sid>hi('Conceal',                    s:base0E, s:base00, '',          '')
call <sid>hi('Cursor',                     s:base00, s:base05, '',          '')
call <sid>hi('NonText',                    s:base03, '',       '',          '')
call <sid>hi('Normal',                     s:base05, s:base00, '',          '')
call <sid>hi('LineNr',                     s:base03, s:base00, '',          '')
call <sid>hi('SignColumn',                 s:base00, s:base00, '',          '')
call <sid>hi('StatusLine',                 s:base02, s:base04, '',          '')
call <sid>hi('StatusLineNC',               s:base01, s:base03, '',          '')
call <sid>hi('VertSplit',                  s:base00, s:base00, '',          '')
call <sid>hi('ColorColumn',                '',       s:base01, '',          '')
call <sid>hi('CursorColumn',               '',       s:base01, '',          '')
call <sid>hi('CursorLine',                 '',       s:base02, 'none',      '')
call <sid>hi('CursorLineNR',               s:base00, s:base00, '',          '')
call <sid>hi('CursorLineNr',               s:base0D, s:base01, '',          '')
call <sid>hi('PMenu',                      s:base04, s:base01, '',          '')
call <sid>hi('PMenuSel',                   s:base14, s:base0E, '',          '')
call <sid>hi('PmenuSbar',                  '',       s:base02, '',          '')
call <sid>hi('PmenuThumb',                 '',       s:base07, '',          '')
call <sid>hi('TabLine',                    s:base03, s:base01, '',          '')
call <sid>hi('TabLineFill',                s:base03, s:base01, '',          '')
call <sid>hi('TabLineSel',                 s:base0A, s:base01, '',          '')
call <sid>hi('EndOfBuffer',                s:base00, s:base00, '',          '')
call <sid>hi('helpExample',                s:base0D, '',       '',          '')
call <sid>hi('helpCommand',                s:base0D, '',       '',          '')

" Standard syntax highlighting
call <sid>hi('Boolean',                    s:base0C, '',       '',          '')
call <sid>hi('Character',                  s:base08, '',       '',          '')
call <sid>hi('Comment',                    s:base04, '',       s:italic,    '')
call <sid>hi('Conditional',                s:base0A, '',       '',          '')
call <sid>hi('Constant',                   s:base12, '',       '',          '')
call <sid>hi('Define',                     s:base11, '',       '',          '')
call <sid>hi('Delimiter',                  s:base09, '',       '',          '')
call <sid>hi('Float',                      s:base0C, '',       '',          '')
call <sid>hi('Function',                   s:base0E, '',       '',          '')
call <sid>hi('Identifier',                 s:base0E, '',       '',          '')
call <sid>hi('Include',                    s:base09, '',       '',          '')
call <sid>hi('Keyword',                    s:base0A, '',       '',          '')
call <sid>hi('Label',                      s:base0A, '',       'bold',      '')
call <sid>hi('Number',                     s:base12, '',       '',          '')
call <sid>hi('Operator',                   s:base05, '',       '',          '')
call <sid>hi('PreProc',                    s:base09, '',       '',          '')
call <sid>hi('Repeat',                     s:base0D, '',       '',          '')
call <sid>hi('Special',                    s:base12, '',       '',          '')
call <sid>hi('SpecialChar',                s:base11, '',       '',          '')
call <sid>hi('Statement',                  s:base08, '',       '',          '')
call <sid>hi('StorageClass',               s:base0C, '',       '',          '')
call <sid>hi('String',                     s:base0A, '',       '',          '')
call <sid>hi('Structure',                  s:base11, '',       '',          '')
call <sid>hi('Tag',                        s:base0D, '',       '',          '')
call <sid>hi('Todo',                       s:base11, '',       'bold',      '')
call <sid>hi('Type',                       s:base0C, '',       '',          '')
call <sid>hi('Typedef',                    s:base0C, '',       '',          '')

call <sid>hi('SpellBad',                   '',       s:base00, 'undercurl', '')
call <sid>hi('SpellLocal',                 '',       s:base00, 'undercurl', '')
call <sid>hi('SpellCap',                   '',       s:base00, 'undercurl', '')
call <sid>hi('SpellRare',                  '',       s:base00, 'undercurl', '')

call <sid>hi('csClass',                    s:base0D, '',       '',          '')
call <sid>hi('csAttribute',                s:base0D, '',       '',          '')
call <sid>hi('csModifier',                 s:base11, '',       '',          '')
call <sid>hi('csType',                     s:base08, '',       '',          '')
call <sid>hi('csUnspecifiedStatement',     s:base0E, '',       '',          '')
call <sid>hi('csContextualStatement',      s:base11, '',       '',          '')
call <sid>hi('csNewDecleration',           s:base08, '',       '',          '')
call <sid>hi('cOperator',                  s:base12, '',       '',          '')
call <sid>hi('cPreCondit',                 s:base11, '',       '',          '')

call <sid>hi('cssColor',                   s:base12, '',       '',          '')
call <sid>hi('cssBraces',                  s:base05, '',       '',          '')
call <sid>hi('cssClassName',               s:base11, '',       '',          '')


call <sid>hi('DiffAdd',                    s:base0A, s:base01, '',          '')
call <sid>hi('DiffChange',                 s:base03, s:base01, '',          '')
call <sid>hi('DiffDelete',                 s:base08, s:base01, '',          '')
call <sid>hi('DiffText',                   s:base0E, s:base01, '',          '')
call <sid>hi('DiffAdded',                  s:base14, s:base0A, '',          '')
call <sid>hi('DiffFile',                   s:base08, s:base00, '',          '')
call <sid>hi('DiffNewFile',                s:base0A, s:base00, '',          '')
call <sid>hi('DiffLine',                   s:base0E, s:base00, '',          '')
call <sid>hi('DiffRemoved',                s:base14, s:base08, '',          '')

call <sid>hi('gitCommitOverflow',          s:base08, '',       '',          '')
call <sid>hi('gitCommitSummary',           s:base0A, '',       '',          '')

call <sid>hi('htmlBold',                   s:base0D, '',       '',          '')
call <sid>hi('htmlItalic',                 s:base11, '',       '',          '')
call <sid>hi('htmlTag',                    s:base12, '',       '',          '')
call <sid>hi('htmlEndTag',                 s:base12, '',       '',          '')
call <sid>hi('htmlArg',                    s:base0D, '',       '',          '')
call <sid>hi('htmlTagName',                s:base07, '',       '',          '')

call <sid>hi('javaScript',                 s:base05, '',       '',          '')
call <sid>hi('javaScriptNumber',           s:base0C, '',       '',          '')
call <sid>hi('javaScriptBraces',           s:base05, '',       '',          '')

call <sid>hi('markdownCode',               s:base0A, '',       '',          '')
call <sid>hi('markdownCodeBlock',          s:base0A, '',       '',          '')
call <sid>hi('markdownHeadingDelimiter',   s:base0E, '',       '',          '')
call <sid>hi('markdownItalic',             s:base11, '',       s:italic,    '')
call <sid>hi('markdownBold',               s:base0D, '',       s:bold,      '')
call <sid>hi('markdownCodeDelimiter',      s:base10, '',       s:italic,    '')
call <sid>hi('markdownError',              s:base05, s:base00, '',          '')

call <sid>hi('NeomakeErrorSign',           s:base08, s:base01, '',          '')
call <sid>hi('NeomakeWarningSign',         s:base0D, s:base01, '',          '')
call <sid>hi('NeomakeInfoSign',            s:base14, s:base01, '',          '')
call <sid>hi('NeomakeError',               s:base08, '',       'undercurl', s:base08)
call <sid>hi('NeomakeWarning',             s:base08, '',       'undercurl', s:base08)

call <sid>hi('SyntasticErrorSign',         s:base08, s:base01, '',          '')
call <sid>hi('SyntasticWarningSign',       s:base0D, s:base01, '',          '')

call <sid>hi('ALEErrorSign',               s:base08, s:base00, s:bold,      '')
call <sid>hi('ALEWarningSign',             s:base0D, s:base00, s:bold,      '')
call <sid>hi('ALEInfoSign',                s:base14, s:base00, s:bold,      '')

call <sid>hi('NERDTreeExecFile',           s:base05, '',       '',          '')
call <sid>hi('NERDTreeDirSlash',           s:base0E, '',       '',          '')
call <sid>hi('NERDTreeOpenable',           s:base0E, '',       '',          '')



call <sid>hi('phpComparison',              s:base05, '',       '',          '')
call <sid>hi('phpParent',                  s:base05, '',       '',          '')
call <sid>hi('phpMemberSelector',          s:base05, '',       '',          '')

call <sid>hi('pythonRepeat',               s:base11, '',       '',          '')
call <sid>hi('pythonOperator',             s:base11, '',       '',          '')

call <sid>hi('rubyConstant',               s:base0D, '',       '',          '')
call <sid>hi('rubySymbol',                 s:base0A, '',       '',          '')
call <sid>hi('rubyAttribute',              s:base0E, '',       '',          '')
call <sid>hi('rubyInterpolation',          s:base0A, '',       '',          '')
call <sid>hi('rubyInterpolationDelimiter', s:base10, '',       '',          '')
call <sid>hi('rubyStringDelimiter',        s:base0A, '',       '',          '')
call <sid>hi('rubyRegexp',                 s:base12, '',       '',          '')

call <sid>hi('sassidChar',                 s:base08, '',       '',          '')
call <sid>hi('sassClassChar',              s:base0C, '',       '',          '')
call <sid>hi('sassInclude',                s:base11, '',       '',          '')
call <sid>hi('sassMixing',                 s:base11, '',       '',          '')
call <sid>hi('sassMixinName',              s:base0E, '',       '',          '')

call <sid>hi('vimfilerLeaf',               s:base05, '',       '',          '')
call <sid>hi('vimfilerNormalFile',         s:base05, s:base00, '',          '')
call <sid>hi('vimfilerOpenedFile',         s:base0E, '',       '',          '')
call <sid>hi('vimfilerClosedFile',         s:base0E, '',       '',          '')
call <sid>hi('vimNotFunc',                 s:base0C, '',       '',          '')
call <sid>hi('vimCommand',                 s:base0C, '',       '',          '')
call <sid>hi('vimBracket',                 s:base08, '',       '',          '')
call <sid>hi('vimNotation',                s:base08, '',       '',          '')
call <sid>hi('vimUserFunc',                s:base0E, '',       '',          '')
call <sid>hi('vimIsCommand',               s:base0D, '',       '',          '')
call <sid>hi('vimTodo',                    s:base11, '',       'bold',          '')
call <sid>hi('vimCommentTitle',            s:base11, '',       'bold',          '')

call <sid>hi('GitGutterAdd',               s:base0A, s:base00, s:bold,      '')
call <sid>hi('GitGutterChange',            s:base0E, s:base00, s:bold,      '')
call <sid>hi('GitGutterDelete',            s:base08, s:base00, s:bold,      '')
call <sid>hi('GitGutterChangeDelete',      s:base11, s:base00, s:bold,      '')

call <sid>hi('xmlTag',                     s:base12, '',       '',          '')
call <sid>hi('xmlTagName',                 s:base05, '',       '',          '')
call <sid>hi('xmlEndTag',                  s:base12, '',       '',          '')

call <sid>hi('jsStatement',                s:base0A, '',       '',          '')

call <sid>hi('gitcommitUnmergedType',      s:base08, '',        '',      '')
call <sid>hi('gitcommitUnmergedFile',      s:base0C, '',        '',      '')
call <sid>hi('gitcommitSelectedType',      s:base0A, '',        '',      '')

call <sid>hi('shTodo',                     s:base11, '',       'bold',      '')
call <sid>hi('shSet',                      s:base0A, '',       '',          '')
call <sid>hi('shSingleQuote',              s:base12, '',       '',          '')
" }}}

let g:terminal_color_0=s:base00[0]
let g:terminal_color_1=s:base08[0]
let g:terminal_color_2=s:base0A[0]
let g:terminal_color_3=s:base0D[0]
let g:terminal_color_4=s:base0E[0]
let g:terminal_color_5=s:base11[0]
let g:terminal_color_6=s:base12[0]
let g:terminal_color_7=s:base05[0]
let g:terminal_color_8=s:base03[0]
let g:terminal_color_9=s:base0C[0]
let g:terminal_color_10=s:base01[0]
let g:terminal_color_11=s:base02[0]
let g:terminal_color_12=s:base04[0]
let g:terminal_color_13=s:base06[0]
let g:terminal_color_14=s:base11[0]
let g:terminal_color_15=s:base07[0]
let g:terminal_color_background=s:base00[0]
let g:terminal_color_foreground=s:base14[0]

call <sid>hi('ExtraWhitespace',            '',       s:base08, '',          '')
syn match ExtraWhitespace /\s\+$/ containedin=vimLineComment


" Debugging Tool: Shows highlight group under cursor
" function! SyntaxItem()
"   return synIDattr(synID(line("."),col("."),1),"name")
" endfunction
" if has('statusline')
"   set statusline=%#Question#                   " set highlighting
"   set statusline+=%-2.2n\                      " buffer number
"   set statusline+=%#WarningMsg#                " set highlighting
"   set statusline+=%f\                          " file name
"   set statusline+=%#Question#                  " set highlighting
"   set statusline+=%h%m%r%w\                    " flags
"   set statusline+=%{strlen(&ft)?&ft:'none'},   " file type
"   set statusline+=%{(&fenc==\"\"?&enc:&fenc)}, " encoding
"   set statusline+=%{((exists(\"+bomb\")\ &&\ &bomb)?\"B,\":\"\")} " BOM
"   set statusline+=%{&fileformat},              " file format
"   set statusline+=%{&spelllang},               " language of spelling checker
"   set statusline+=%{SyntaxItem()}              " syntax highlight group under cursor
"   set statusline+=%=                           " ident to the right
"   set statusline+=0x%-8B\                      " character code under cursor
"   set statusline+=%-7.(%l,%c%V%)\ %<%P         " cursor position/offset
" endif
